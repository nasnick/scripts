====================================================================================
****************************** PACKAGE MANAGEMENT **********************************
====================================================================================
################
RPM

Download from FTP server:

rpm -ivh ftp://username:password@hostname:port/path/to/remote/package/file.rpm

i = install, v = verbose, h = hash marks

# rpm -ivh ftp://mjang:Ila451MS@192.168.122.1/pub/inst/policycoreutils-gui-2.0.83-19.1.el6.x86_64.rpm

SECURITY

GPG = GNU Privacy Guard (like PGP)

[root@localhost ~]# ls /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-
RPM-GPG-KEY-CentOS-7          RPM-GPG-KEY-CentOS-Debug-7    RPM-GPG-KEY-CentOS-Testing-7

Stored in RPM database:

[root@localhost ~]# rpm -qa gpg-pubkey
gpg-pubkey-f4a80eb5-53a7ff4b

In red hat there are 5 keys in /etc/pki/rpm-gpg:

GPG Key                             Description
----------------------------------|-----------------------------------------
RPM-GPG-KEY-redhat-beta             Packages built for the RHEL 6 beta
RPM-GPG-KEY-redhat-legacy-former    Packages for pre–November 2006 releases
                                    (and updates)
RPM-GPG-KEY-redhat-legacy-release   Packages for post–November 2006 releases
RPM-GPG-KEY-redhat-legacy-rhx       Packages associated with Red Hat Exchange
RPM-GPG-KEY-redhat-release          Released packages for RHEL 6

If you see an available update for a kernel RPM, the temptation is to run the:
rpm -U newkernel command

DON'T DO IT KNUCKLEHEAD!

Install kernel alongside new kernel:

rpm -ivh newkernel

or

yum install kernel

Fair bit O' junk in the /boot folder:

[root@localhost ~]# ls -ltr /boot
total 87504
-rw-------. 1 root root  2881257 Mar  7 00:45 System.map-3.10.0-229.el7.x86_64
-rw-r--r--. 1 root root   123838 Mar  7 00:45 config-3.10.0-229.el7.x86_64
-rwxr-xr-x. 1 root root  5029136 Mar  7 00:45 vmlinuz-3.10.0-229.el7.x86_64
-rw-r--r--. 1 root root   240039 Mar  7 00:47 symvers-3.10.0-229.el7.x86_64.gz
drwxr-xr-x. 2 root root       26 May 23 13:19 grub
-rw-r--r--. 1 root root   589469 May 23 13:20 initrd-plymouth.img
-rw-r--r--. 1 root root 39837247 May 23 13:23 initramfs-0-rescue-f79ec697463e4fe69fcf177a2ebc3ebd.img
-rwxr-xr-x. 1 root root  5029136 May 23 13:23 vmlinuz-0-rescue-f79ec697463e4fe69fcf177a2ebc3ebd
-rw-r--r--. 1 root root 17690018 May 23 13:24 initramfs-3.10.0-229.el7.x86_64.img
drwxr-xr-x. 6 root root      104 May 23 13:24 grub2
-rw-r--r--. 1 root root 18172830 Jul 28 17:00 initramfs-3.10.0-229.el7.x86_64kdump.img

/boot/config-3.10.0-229.el7.x86_64 has heaps of kernel config settings

initramfs-*   = initial RAM disk filesystem - called during boot. Still a bit of the ol' mystery around this

initrd-*      = root filesystem for kernel crash dumps

symvers-*     = list of modules

System.map-*  = map of system names for variables and functions with location in memory

vmlinuz-*     = the gosh damn kernel

The book talks about /boot/grub/grub.conf but all I can find is /boot/grub2/grub.cfg... systemd has changed this.

>>> PACKAGE QUERIES <<<

rpm Query Command

rpm -qa
Lists all installed packages.

rpm -qf /path/to/file
Identifies the package associated with /path/to/file.

rpm -qc packagename
Lists only configuration files from packagename.

rpm -qi packagename
Displays basic information for packagename.

rpm -ql packagename
Lists all files from packagename.

rpm -qR packagename
Notes all dependencies; you can’t install packagename without them.

----------------------------------------------------------------------------------------

View all depenencies for a package:

*rpm -qR

[root@localhost ~]# rpm -qR python-ethtool-0.8-5.el7.x86_64
/usr/bin/python
libc.so.6()(64bit)
libc.so.6(GLIBC_2.2.5)(64bit)
libc.so.6(GLIBC_2.3)(64bit)
libc.so.6(GLIBC_2.3.4)(64bit)
libc.so.6(GLIBC_2.4)(64bit)
libnl.so.1()(64bit)
libpthread.so.0()(64bit)
libpthread.so.0(GLIBC_2.2.5)(64bit)
libpython2.7.so.1.0()(64bit)
python(abi) = 2.7
rpmlib(CompressedFileNames) <= 3.0.4-1
rpmlib(FileDigests) <= 4.6.0-1
rpmlib(PayloadFilesHavePrefix) <= 4.0-1
rtld(GNU_HASH)
rpmlib(PayloadIsXz) <= 5.2-1

*rpm -ql

[root@localhost ~]# rpm -ql python-ethtool-0.8-5.el7.x86_64
/usr/lib64/python2.7/site-packages/ethtool-0.8-py2.7.egg-info
/usr/lib64/python2.7/site-packages/ethtool.so
/usr/sbin/pethtool
/usr/sbin/pifconfig
/usr/share/doc/python-ethtool-0.8
/usr/share/doc/python-ethtool-0.8/COPYING
/usr/share/man/man8/pethtool.8.gz
/usr/share/man/man8/pifconfig.8.gz

VERIFY

Changed config in httpd package and the verify failed:

[root@localhost httpd]# rpm --verify --file /usr/sbin/httpd
S.5....T.  c /etc/httpd/conf/httpd.conf

Failure Code Meaning

5 MD5 checksum
S File size
L Symbolic link
T File modification time
D Device
U User
G Group
M Mode

yum-config-manager

Shows all configuration parameters.

/ETC/YUM.CONF

###########################################
[root@localhost ~]# cat /etc/yum.conf 
[main]
cachedir=/var/cache/yum/$basearch/$releasever

keepcache=0 << caches aren't kept so system is kept up to date. Not sure when you'd want to have this switched on.

debuglevel=2 << The following ranges from 0-10
logfile=/var/log/yum.log

exactarch=1 << Makes sure the architecture matches processor type

obsoletes=1 << uninstallation of obsolete packages with `yum update` command

gpgcheck=1 << makes sure that yum checks GPG signature of downloaded packages

plugins=1 << provides link to python-based RNH plugins in /usr/share/yum-plugins directory

installonly_limit=5 << kernel packages are always installed but not upgraded

bugtracker_url=http://bugs.centos.org/set_project.php?project_id=23&ref=http://bugs.centos.org/bug_report_page.php?category=yum
distroverpkg=centos-release

#  This is the default, if you make this bigger yum won't see if the metadata
# is newer on the remote and so you'll "gain" the bandwidth of not having to
# download the new metadata and "pay" for it by yum not having correct
# information.
#  It is esp. important, to have correct metadata, for distributions like
# Fedora which don't keep old packages around. If you don't like this checking
# interupting your command line usage, it's much better to have something
# manually check the metadata once an hour (yum-updatesd will do this)

# metadata_expire=90m << Lifetime for headers. If yum isn't used for 90 mins then next use it will download latest header info

# PUT YOUR REPOS HERE OR IN separate files named file.repo
# in /etc/yum.repos.d  << reference to directory for putting config info for repositories
#######################################

/ETC/YUM/PLUGINCONF.D

=> connection between yum abd RHN

[root@localhost ~]# ls -ltr /etc/yum/pluginconf.d/
total 12
-rw-r--r--. 1 root root 323 Oct  8  2013 langpacks.conf.rpmnew
-rw-r--r--. 1 root root 279 Mar 10 09:51 fastestmirror.conf
-rw-r--r--. 1 root root 374 May 23 13:18 langpacks.conf

** don't have rhnplugin.conf refresh-packagekit.conf file talked about in book.

rhnplugin.conf has:

[main]
enabled = 1
gpgcheck = 1

/ETC/YUM.REPOS.D

1/ Install httpd and make sure it starts at boot:

[nick@nick ~]$ chkconfig httpd on
Note: Forwarding request to 'systemctl enable httpd.service'.
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.

2/ Created this:

[test-repo]
name=Some test repo
baseurl=http://10.0.8.193/stuff

[root@localhost ~]# cat /etc/yum.repos.d/testrepo.repo
[test-repo]
name=Some test repo
baseurl=http://10.0.8.193/stuff

Once configured:

3/ yum clean all

(need to check out the error below)

4/ [root@localhost ~]# yum update
Loaded plugins: fastestmirror, langpacks
Could not retrieve mirrorlist http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=os&infra=stock error was
14: curl#6 - "Could not resolve host: mirrorlist.centos.org; Unknown error"


 One of the configured repositories failed (Unknown),
 and yum doesn't have enough cached data to continue. At this point the only
 safe thing yum can do is fail. There are a few ways to work "fix" this:

     1. Contact the upstream for the repository and get them to fix the problem.

     2. Reconfigure the baseurl/etc. for the repository, to point to a working
        upstream. This is most often useful if you are using a newer
        distribution release than is supported by the repository (and the
        packages for the previous distribution release still work).

     3. Disable the repository, so yum won't use it by default. Yum will then
        just ignore the repository until you permanently enable it again or use
        --enablerepo for temporary usage:

            yum-config-manager --disable <repoid>

     4. Configure the failing repository to be skipped, if it is unavailable.
        Note that yum will try to contact the repo. when it runs most commands,
        so will have to try and fail each time (and thus. yum will be be much
        slower). If it is a very temporary problem though, this is often a nice
        compromise:

            yum-config-manager --save --setopt=<repoid>.skip_if_unavailable=true

Cannot find a valid baseurl for repo: base/7/x86_64