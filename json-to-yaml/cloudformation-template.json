Skip to content
This repository
Search
Pull requests
Issues
Gist
 @nickschofield
 Unwatch 4
  Star 0
 Fork 0 localist/orahq-cloudfront-templates Private
 Code  Issues 0  Pull requests 0  Projects 0  Wiki  Pulse  Graphs  Settings
Branch: master Find file Copy pathorahq-cloudfront-templates/staging/vpc.template
95a3942  22 days ago
@jerrychenfoundry jerrychenfoundry add fulcrum cloud template
1 contributor
RawBlameHistory    
814 lines (812 sloc)  28.6 KB
{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "VPC for the fulcrum WINZ project",
  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "BastionInstanceType" : {
      "Description" : "Bastion Host EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [  "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
      ,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "NATInstanceType" : {
      "Description" : "NAT Device EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
      ,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "VPNAddress": {
      "Type": "String",
      "Description" : "IP Address of your VPN device",
      "MinLength": "7",
      "MaxLength": "15",
      "Default": "202.55.106.44",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "must be a valid IP address of the form x.x.x.x"
    },
    "OnPremiseCIDR": {
      "Type" : "String",
      "Description" : "IP Address range for your existing infrastructure",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "192.168.10.0/28",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings" : {
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.5.0.0/16" },
      "PublicA"  : { "CIDR" : "10.5.1.0/24" },
      "PublicB"  : { "CIDR" : "10.5.2.0/24" },
      "TestAppA"  : { "CIDR" : "10.5.11.0/24" },
      "TestAppB"  : { "CIDR" : "10.5.12.0/24" },
      "TestDBA"  : { "CIDR" : "10.5.13.0/24" },
      "TestDBB"  : { "CIDR" : "10.5.14.0/24" },
      "TestRedisA"  : { "CIDR" : "10.5.15.0/24" },
      "TestRedisB"  : { "CIDR" : "10.5.16.0/24" },
      "TestRedShiftA"  : { "CIDR" : "10.5.17.0/24" },
      "TestRedShiftB"  : { "CIDR" : "10.5.18.0/24" }
    },
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    }
    ,
    "AWSNATRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-c02b04a8", "HVM64" : "ami-b0210ed8"},
      "us-west-2"        : {"PV64" : "ami-2dae821d", "HVM64" : "ami-75ae8245"},
      "us-west-1"        : {"PV64" : "ami-67a54423", "HVM64" : "ami-ada746e9"},
      "eu-west-1"        : {"PV64" : "ami-cb7de3bc", "HVM64" : "ami-ef76e898"},
      "eu-central-1"     : {"PV64" : "ami-3604392b", "HVM64" : "ami-1e073a03"},
      "ap-northeast-1"   : {"PV64" : "ami-c7e016c7", "HVM64" : "ami-11dc2a11"},
      "ap-southeast-1"   : {"PV64" : "ami-b098a9e2", "HVM64" : "ami-1a9dac48"},
      "ap-southeast-2"   : {"PV64" : "ami-0fed9d35", "HVM64" : "ami-43ee9e79"},
      "sa-east-1"        : {"PV64" : "ami-93fb408e", "HVM64" : "ami-63fa417e"},
      "cn-north-1"       : {"PV64" : "ami-bc3fad85", "HVM64" : "ami-be3fad87"}
    },
    "AWSBastionRegionArch2AMI" : {
      "ap-southeast-2"   : {"PV64" : "ami-1fecac25", "HVM64" : "ami-17ecac2d"}
    }
  }
  ,
  "Resources" : {
    "NATRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "NAT_Takeover",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeRouteTables",
                "ec2:CreateRoute",
                "ec2:ReplaceRoute",
                "ec2:StartInstances",
                "ec2:StopInstances"
              ],
              "Resource": "*"
            } ]
          }
        } ]
      }
    },
    "NATRoleProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "NATRole"
        } ]
      }
    },
    "BastionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ ]
      }
    },
    "BastionRoleProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "BastionRole"
        } ]
      }
    },
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "InstanceTenancy" : "default",
        "Tags" : [ {"Key" : "Name", "Value" : "WINZ"} ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Name", "Value" : "WINZ-IG"}]
      }
    },
    "GatewayToInternet" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : "PublicRouteTable"}
        ]
      }
    },
    "NatARouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : "NatARouteTable"},
          { "Key" : "Description", "Value" : "Outgoing internet traffic though NAT A"}
        ]
      }
    },
    "NatBRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : "NatBRouteTable"},
          { "Key" : "Description", "Value" : "Outgoing internet traffic though NAT B"}
        ]
      }
    },
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "InternetGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "NatRouteA" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "NATInstanceA",
      "Properties" : {
        "RouteTableId" : { "Ref" : "NatARouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATInstanceA" }
      }
    },
    "NatRouteB" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "NATInstanceB",
      "Properties" : {
        "RouteTableId" : { "Ref" : "NatBRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATInstanceB" }
      }
    },
    "PublicSubnetA": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2a",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicA", "CIDR" ]},
        "MapPublicIpOnLaunch" : true,
        "Tags" : [ { "Key": "Name", "Value": "public-a"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    } ,
    "PublicSubnetRouteTableA" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetA" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicSubnetB": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2b",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "PublicB", "CIDR" ]},
        "MapPublicIpOnLaunch" : true,
        "Tags" : [ { "Key": "Name", "Value": "public-b"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "PublicSubnetRouteTableB" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetB" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "NATIPAddressA" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "NATInstanceA" }
      }
    },
    "NATIPAddressB" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "NATInstanceB" }
      }
    },

    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the NAT device",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "10.5.0.0/16"
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : "10.5.0.0/16"
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "10.5.0.0/16"
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "9418",
          "ToPort" : "9418",
          "CidrIp" : "10.5.0.0/16"
        }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" } ,
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "9418", "ToPort" : "9418", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [ { "Key": "Name", "Value": "NAT"},
          { "Key": "env", "Value": "infra"}
        ]
      }
    },
    "NATInstanceA" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "NAT instance for ap-southeast-2a"
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "NATInstanceType" },
        "SubnetId" : { "Ref" : "PublicSubnetA" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NATInstanceType" }, "Arch" ] } ] },
          "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }],
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -v\n",
            "yum update -y aws*\n",
            ". /etc/profile.d/aws-apitools-common.sh\n",
            "# Configure iptables\n",
            "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
            "/sbin/iptables-save > /etc/sysconfig/iptables\n",
            "# Configure ip forwarding and redirects\n",
            "echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >  /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
            "mkdir -p /etc/sysctl.d/\n",
            "cat <<EOF > /etc/sysctl.d/nat.conf\n",
            "net.ipv4.ip_forward = 1\n",
            "net.ipv4.conf.eth0.send_redirects = 0\n",
            "EOF\n"
          ]]}},
          "KeyName"  : { "Ref" : "KeyName" },
          "Tags": [ { "Key" : "Name", "Value" : "NATInstanceA"},
            { "Key" : "Description", "Value": "NAT instance for outgoing internet traffic on ap-southeast-2a"}
          ]
      }
    },
    "NATInstanceB" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "NAT instance for ap-southeast-2b"
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "NATInstanceType" },
        "SubnetId" : { "Ref" : "PublicSubnetB" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NATInstanceType" }, "Arch" ] } ] },
          "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }],
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -v\n",
            "yum update -y aws*\n",
            ". /etc/profile.d/aws-apitools-common.sh\n",
            "# Configure iptables\n",
            "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
            "/sbin/iptables-save > /etc/sysconfig/iptables\n",
            "# Configure ip forwarding and redirects\n",
            "echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >  /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
            "mkdir -p /etc/sysctl.d/\n",
            "cat <<EOF > /etc/sysctl.d/nat.conf\n",
            "net.ipv4.ip_forward = 1\n",
            "net.ipv4.conf.eth0.send_redirects = 0\n",
            "EOF\n"
          ]]}},
          "KeyName"  : { "Ref" : "KeyName" },
          "Tags": [ { "Key" : "Name", "Value" : "NATInstanceB"},
            { "Key" : "Description", "Value": "NAT instance for outgoing internet traffic on ap-southeast-2b"}
          ]
      }
    },
    "BastionSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group to protect Bastion Host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" :"0.0.0.0/0"
        } ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "-1", "FromPort" : "0",  "ToPort" : "0",  "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },
    "TestAppSubnetA": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2a",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestAppA", "CIDR" ]},
        "Tags" : [ { "Key": "Name", "Value": "private-app-a"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestAppSubnetARouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "NatARouteTable"},
        "SubnetId" : { "Ref" : "TestAppSubnetA"}
      }
    },
    "TestAppSubnetB": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2b",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestAppB", "CIDR" ]},
        "Tags" : [ { "Key": "Name", "Value": "private-app-b"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestAppSubnetBRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "NatBRouteTable"},
        "SubnetId" : { "Ref" : "TestAppSubnetB"}
      }
    },
    "TestDBSubnetA": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2a",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestDBA", "CIDR" ]},
        "Tags" : [ { "Key": "Name", "Value": "private-db-a"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestDBSubnetB": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2b",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestDBB", "CIDR" ]},
        "Tags" : [ { "Key": "Name", "Value": "private-db-b"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestRedisSubnetA": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2a",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestRedisA", "CIDR" ]},
        "Tags" : [
          { "Key": "Name", "Value": "private-redis-a"},
          { "Key": "env", "Value": "test"}
        ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestRedisSubnetB": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2b",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestRedisB", "CIDR" ]},
        "Tags" : [ { "Key": "Name", "Value": "private-redis-b"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestRedShiftSubnetA": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2a",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestRedShiftA", "CIDR" ]},
        "Tags" : [ { "Key": "Name", "Value": "private-redshift-a"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestRedShiftSubnetB": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "ap-southeast-2b",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "TestRedShiftB", "CIDR" ]},
        "Tags" : [ { "Key": "Name", "Value": "private-redshift-b"}],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "TestAppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for staging app servers on Test environment",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "OnPremiseCIDR" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
          }
        ],
        "Tags" : [ { "Key": "Name", "Value": "test-app"},
          { "Key": "env", "Value": "test"}
        ]
      }
    },
    "AdobeFrontalSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for Adobe Campaign frontal servers",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup" }
          }
        ],
        "Tags" : [ { "Key": "Name", "Value": "adobe-frontal-sg"} ]
      }
    },
    "AdobeMarketingSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for Adobe Campaign marketing servers",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup" }
          }
        ],
        "Tags" : [ { "Key": "Name", "Value": "adobe-marketing-sg"} ]
      }
    },
    "AdobeDBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for staging Postgres on Test environment",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "5432",
            "ToPort" : "5432",
            "SourceSecurityGroupId" :{ "Ref":"AdobeMarketingSecurityGroup" }
          }
        ],
        "Tags" : [ { "Key": "Name", "Value": "adobe-rds-sg"} ]
      }
    },
    "TestSensuSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for sensu server",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "3000",
            "ToPort" : "3000",
            "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "5671",
            "ToPort" : "5672",
            "CidrIp" :"0.0.0.0/0"
          }
        ],
        "Tags" : [ { "Key": "Name", "Value": "test-sensu-sg"} ]
      }
    },
    "TestDBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for staging Postgres on Test environment",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "5432",
          "ToPort" : "5432",
          "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "5432",
          "ToPort" : "5432",
          "SourceSecurityGroupId" :{ "Ref":"TestAppSecurityGroup"}
        }
        ]
        ,
        "Tags" : [ { "Key": "Name", "Value": "test-db"},
          { "Key": "env", "Value": "test"}
        ]
      }
    },
    "TestRedShiftSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for staging Redshift cluster on Test environment",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "5439",
          "ToPort" : "5439",
          "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "5439",
          "ToPort" : "5439",
          "SourceSecurityGroupId" :{ "Ref":"TestAppSecurityGroup"}
        }
        ]
        ,
        "Tags" : [ { "Key": "Name", "Value": "test-redshift"},
          { "Key": "env", "Value": "test"}
        ]
      }
    },
    "TestRedisSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group for staging Redshift cluster on Test environment",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "SourceSecurityGroupId" :{ "Ref":"BastionSecurityGroup"}
        },
        { "IpProtocol" : "tcp",
          "FromPort" : "6379",
          "ToPort" : "6379",
          "SourceSecurityGroupId" :{ "Ref":"TestAppSecurityGroup"}
        }
        ]
        ,
        "Tags" : [ { "Key": "Name", "Value": "test-redis"},
          { "Key": "env", "Value": "test"}
        ]
      }
    },
    "OpsworksServiceRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "opsworks.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies" : [
          { "PolicyName" : "OpsworksService",
            "PolicyDocument" : {"Statement": [{"Action": ["ec2:*", "iam:PassRole",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:DescribeAlarms",
              "elasticloadbalancing:*",
              "rds:*"],
              "Effect": "Allow",
              "Resource": ["*"] }]}
          }
        ]
      }
    },
    "VPNGateway" : {
      "Type" : "AWS::EC2::VPNGateway",
      "Properties" : {
        "Type" : "ipsec.1",
        "Tags" : [{ "Key" : "Name", "Value" : "TestVGW"}]
      }
    },
    "VPNGatewayAttachment" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "VpnGatewayId" : {"Ref" : "VPNGateway" }
      }
    },
    "CustomerGateway" : {
      "Type" : "AWS::EC2::CustomerGateway",
      "Properties" : {
        "Type" : "ipsec.1",
        "BgpAsn" : "65000",
        "IpAddress" : { "Ref" : "VPNAddress" },
        "Tags" : [{ "Key" : "Name", "Value" : "TestCGW" }]
      }
    },
    "VPNConnection" : {
      "Type" : "AWS::EC2::VPNConnection",
      "Properties" : {
        "Type" : "ipsec.1",
        "StaticRoutesOnly" : "true",
        "CustomerGatewayId" : {"Ref" : "CustomerGateway"},
        "VpnGatewayId" : { "Ref" : "VPNGateway" }
      }
    },
    "VPNConnectionRoute" : {
      "Type" : "AWS::EC2::VPNConnectionRoute",
      "Properties" : {
        "VpnConnectionId" : { "Ref" : "VPNConnection" },
        "DestinationCidrBlock" : { "Ref" : "OnPremiseCIDR" }
      }
    },
    "VPNGatewayRouteProp" : {
      "Type" : "AWS::EC2::VPNGatewayRoutePropagation",
      "Properties" : {
        "RouteTableIds" : [{"Ref" : "NatARouteTable"},{"Ref" : "NatBRouteTable"}],
        "VpnGatewayId" : {"Ref" : "VPNGateway"}
      }
    }
  }
  ,
  "Outputs" : {
    "VPCId" : {
      "Description" : "VPCId of the newly created VPC",
      "Value" :  { "Ref" : "VPC" }
    }
  }
}
Contact GitHub API Training Shop Blog About
© 2016 GitHub, Inc. Terms Privacy Security Status Help
