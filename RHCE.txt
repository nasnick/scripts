====================================================================================
******************************* PARTITIONS & LVM ***********************************
====================================================================================
>>> PARTED <<<

parted /dev/sdb1

> mkpart
> primary
> linux-swap
> Start?0
> end?2048m

Created 4 partitions on a 5GB disk:

[root@localhost ~]# parted /dev/sde
GNU Parted 3.1
Using /dev/sde
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print                                                            
Model: ATA VBOX HARDDISK (scsi)
Disk /dev/sde: 5369MB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start   End     Size    Type     File system     Flags
 1      1049kB  1000MB  999MB   primary  ext4
 2      1000MB  3000MB  2000MB  primary
 3      3000MB  4000MB  1000MB  primary
 4      4000MB  5000MB  999MB   primary  linux-swap(v1)


Setting up the swap space:

[root@localhost ~]# mkswap /dev/sde4
Setting up swapspace version 1, size = 975868 KiB
no label, UUID=3d523bcb-0502-4b9c-8a77-65bb74ef5da4
[root@localhost ~]# swapon /dev/sde4

View swaps on the system:

[root@localhost ~]# cat /proc/swaps
Filename        Type    Size  Used  Priority
/dev/dm-1                               partition 839676  137848  -1
/dev/sde4                               partition 975868  0 -2

==========================================================================================
REST THE PURPOSE USING *PARTED

This changes the flag to LVM.

  # parted /dev/sdb
Run the print command. The flags column for existing partitions should be empty. Now you’ll set that flag with the set command. From the commands shown here, the flags are set to use that first partition of the second drive as an LVM partition:
(parted) set 
Partition number? 1 
Flag to Invert? lvm 
New state? [on]/off on

--------------------------------------------

LOGICAL VOLUME MANAGER

Physical Volumes >> Volume Group >> Logical Volumes

/dev/sdb1        >> vg_group01   >> secretSanta

Physical         Logical
extents          extents

Physical Extents = YOUR DATA

Physical Volumme

[root@localhost ~]# pvdisplay
  --- Physical volume ---
  PV Name               /dev/sda2
  VG Name               centos
  PV Size               7.51 GiB / not usable 3.00 MiB
  Allocatable           yes 
  PE Size               4.00 MiB
  Total PE              1922
  Free PE               10
  Allocated PE          1912
  PV UUID               qZw6wm-o0kt-Fcmq-iajl-NQEP-H95Z-Xi3zjg

Logical Volume

LVM has two units: physical extents and logical extents. 

Physical extents are used when dealing with volume groups, and logical extents, with logical volumes. The logical extents always map back to a physical extent

__________________________________________________________________
CREATING A LVM PARTITION

*PVCREATE

1/ Initialise disk to be used for a physical volume:

[root@localhost ~]# pvcreate /dev/sdb1
  Physical volume "/dev/sdb1" successfully created

*PVDISPLAY

VIEW: 

[root@localhost ~]# pvdisplay /dev/sdb1
  "/dev/sdb1" is a new physical volume of "2.79 GiB"
  --- NEW Physical volume ---
  PV Name               /dev/sdb1
  VG Name               
  PV Size               2.79 GiB
  Allocatable           NO
  PE Size               0   
  Total PE              0
  Free PE               0
  Allocated PE          0
  PV UUID               b8fbTO-FgQa-PFAl-8H0p-hk2e-lWAO-fMcN2C

__________________________________________________________________
  2/ Create volume group and add physical disk to it:

[root@localhost ~]# vgcreate vg_group01 /dev/sdb1
  Volume group "vg_group01" successfully created

VIEW:

[root@localhost ~]# vgdisplay -v vg_group01
    Using volume group(s) on command line.
  --- Volume group ---
  VG Name               vg_group01
  System ID             
  Format                lvm2
  Metadata Areas        1
  Metadata Sequence No  1
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                0
  Open LV               0
  Max PV                0
  Cur PV                1
  Act PV                1
  VG Size               2.79 GiB
  PE Size               4.00 MiB
  Total PE              715
  Alloc PE / Size       0 / 0   
  Free  PE / Size       715 / 2.79 GiB
  VG UUID               ArhzVv-Isra-obOu-Mtz9-3Hx2-YpDS-Se4p2P
   
  --- Physical volumes ---
  PV Name               /dev/sdb1     
  PV UUID               b8fbTO-FgQa-PFAl-8H0p-hk2e-lWAO-fMcN2C
  PV Status             allocatable
  Total PE / Free PE    715 / 715

  Physical volumes are broken down into physical extents - 4MB by default.


__________________________________________________________________
3/ Create logical volume

[root@localhost ~]# lvcreate -L 2790 vg_group01
  Rounding up size to full physical extent 2.73 GiB
  Logical volume "lvol0" created.

==========================================================================================
VIEW:

[root@localhost ~]# lvdisplay vg_group01
  --- Logical volume ---
  LV Path                /dev/vg_group01/lvol0
  LV Name                lvol0
  VG Name                vg_group01
  LV UUID                lZwM2Y-TxI0-43Ib-7Slx-4ot4-aVNk-CfaCd9
  LV Write Access        read/write
  LV Creation host, time localhost.localdomain, 2015-06-09 18:27:22 +1200
  LV Status              available
  # open                 0
  LV Size                2.73 GiB
  Current LE             698
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     8192
  Block device           253:2

__________________________________________________________________
See PHYSICAL >> VOLUME >> LOGICAL

**See dem physical extents down the bottom?

[root@localhost ~]# vgdisplay -v vg_group01
    Using volume group(s) on command line.
  --- Volume group ---
  VG Name               vg_group01
  System ID             
  Format                lvm2
  Metadata Areas        1
  Metadata Sequence No  2
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                1
  Open LV               0
  Max PV                0
  Cur PV                1
  Act PV                1
  VG Size               2.79 GiB
  PE Size               4.00 MiB
  Total PE              715
  Alloc PE / Size       698 / 2.73 GiB
  Free  PE / Size       17 / 68.00 MiB
  VG UUID               ArhzVv-Isra-obOu-Mtz9-3Hx2-YpDS-Se4p2P
   
  --- Logical volume ---
  LV Path                /dev/vg_group01/lvol0
  LV Name                lvol0
  VG Name                vg_group01
  LV UUID                lZwM2Y-TxI0-43Ib-7Slx-4ot4-aVNk-CfaCd9
  LV Write Access        read/write
  LV Creation host, time localhost.localdomain, 2015-06-09 18:27:22 +1200
  LV Status              available
  # open                 0
  LV Size                2.73 GiB
  Current LE             698
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     8192
  Block device           253:2
   
  --- Physical volumes ---
  PV Name               /dev/sdb1     
  PV UUID               b8fbTO-FgQa-PFAl-8H0p-hk2e-lWAO-fMcN2C
  PV Status             allocatable
  Total PE / Free PE    715 / 17

Here's where it lives:

  [root@localhost ~]# ls -ltr /dev | grep vg
  crw-------. 1 root root     10,  63 Jun  9 17:49 vga_arbiter
  drwxr-xr-x. 2 root root          60 Jun  9 18:27 vg_group01

=================================================================================
RENAME DAT thang:

  Rename all in one golden stroke ya'll:

  [root@localhost ~]# lvrename /dev/vg_group01/lvol0 /dev/vg_group01/SecretSanta
  Renamed "lvol0" to "SecretSanta" in volume group "vg_group01"


[root@localhost ~]# lvdisplay vg_group01
  --- Logical volume ---
  LV Path                /dev/vg_group01/SecretSanta

=================================================================================
RESIZE THAT THiNG

When you resize a logical volume that already contains a formatted file system, you
need to grow the file system into the new space that becomes available
__________________________________________________________________
Resize dat sucker to be smaller:

[root@localhost ~]# lvresize -L 2000 /dev/vg_group01/SecretSanta
  WARNING: Reducing active logical volume to 1.95 GiB
  THIS MAY DESTROY YOUR DATA (filesystem etc.)
Do you really want to reduce SecretSanta? [y/n]: y

  Size of logical volume vg_group01/SecretSanta changed from 2.73 GiB (698 extents) to 1.95 GiB (500 extents).
  Logical volume SecretSanta successfully resized

_________________________________________________________________
  Chuck a few extra extends on dere:

  [root@localhost ~]# lvextend -L +200 /dev/vg_group01/SecretSanta 
  Size of logical volume vg_group01/SecretSanta changed from 1.95 GiB (500 extents) to 2.15 GiB (550 extents).
  Logical volume SecretSanta successfully resized

=================================================================================
ADD ANOTHER PHYSICAL VOLUME TO EXTEND VOLUME GROUP

[root@localhost ~]# pvcreate /dev/sdb2
  Physical volume "/dev/sdb2" successfully created

_________________________________________________________________
Chuck it in the volume group:

[root@localhost ~]# vgextend vg_group01 /dev/sdb2
  Volume group "vg_group01" successfully extended

_________________________________________________________________
Now we getting somewhere - look at the bottom:

(also   VG Size               6.00 GiB)

[root@localhost ~]# vgdisplay -v vg_group01 
    Using volume group(s) on command line.
  --- Volume group ---
  VG Name               vg_group01
  System ID             
  Format                lvm2
  Metadata Areas        2
  Metadata Sequence No  6
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                1
  Open LV               0
  Max PV                0
  Cur PV                2
  Act PV                2
  VG Size               6.00 GiB
  PE Size               4.00 MiB
  Total PE              1535
  Alloc PE / Size       550 / 2.15 GiB
  Free  PE / Size       985 / 3.85 GiB
  VG UUID               ArhzVv-Isra-obOu-Mtz9-3Hx2-YpDS-Se4p2P
   
  --- Logical volume ---
  LV Path                /dev/vg_group01/SecretSanta
  LV Name                SecretSanta
  VG Name                vg_group01
  LV UUID                lZwM2Y-TxI0-43Ib-7Slx-4ot4-aVNk-CfaCd9
  LV Write Access        read/write
  LV Creation host, time localhost.localdomain, 2015-06-09 18:27:22 +1200
  LV Status              available
  # open                 0
  LV Size                2.15 GiB
  Current LE             550
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     8192
  Block device           253:2
   
  --- Physical volumes ---
  PV Name               /dev/sdb1     
  PV UUID               b8fbTO-FgQa-PFAl-8H0p-hk2e-lWAO-fMcN2C
  PV Status             allocatable
  Total PE / Free PE    715 / 165
   
  PV Name               /dev/sdb2     
  PV UUID               e9VSlX-dDVz-yd1p-mdBR-OZeJ-9hzJ-zp2fyw
  PV Status             allocatable
  Total PE / Free PE    820 / 820


_________________________________________________________________
lvresize/ lvreduce

lvresize -L 2000 /dev/sdb1/secretSanta

If you add another disk using vgextend vg_group01 /dev/sdb2 then use lvresize to boost that sucker up. E.g. if 4G to start with then add another 500MB disk then:

lvresize -L 4550 /dev/mockinbird/crow

_________________________________________________________________
Remove the Disk That was added to volume group

vgreduce vg_group01 /dev/sdb2

=================================================================================
MIGRATING DATA

Physical Extents = YOUR DATA

So we have:

[root@localhost ~]# tree /dev/vg_group01/
/dev/vg_group01/
└── SecretSanta -> ../dm-2

with /dev/sdb1 and /dev/sdb2 added.. 

Can copy from one to the other with pvmove command so if /dev/sdb2 is dying:

pvmove /dev/sdb1 /dev/sdb2



   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1     5859375     2929687+  83  Linux
/dev/sdb2         5859376    12582911     3361768   83  Linux


=================================================================================
REMOVING DATA/ LVs and PVs

_________________________________________________________________
1/ Remove Logical Volume

lvremove /dev/vg_group01/secretSanta


2/ Remove Volume Group

vgremove vg_group01


Remove Both LV and VG Together

vgremove -f vg_group01

3/ Wipe Out Physical Disks

pvremove /dev/sdb1

=================================================================================
SETTING UP RAID

RAID 1: Mirroring
RAID 5: Striping with parity (25% used for parity bit)

Add 3 partitions into the array:

[root@localhost ~]# mdadm -Cv /dev/md0 --level=5 -n3 /dev/sdd1 /dev/sdd2 /dev/sde1

mdadm: You have listed more devices (4) than are in the array(3)!
[root@localhost ~]# mdadm -Cv /dev/md0 --level=5 -n3 /dev/sdd1 /dev/sdd2 /dev/sde1 
mdadm: layout defaults to left-symmetric
mdadm: layout defaults to left-symmetric
mdadm: chunk size defaults to 512K
mdadm: size set to 1951744K
mdadm: largest drive (/dev/sdd2) exceeds size (1951744K) by more than 1%

Continue creating array? yes
mdadm: Defaulting to version 1.2 metadata
mdadm: array /dev/md0 started.

_________________________________________________________________
Created successfully:

[root@localhost ~]# mdadm -D /dev/md0
/dev/md0:
        Version : 1.2
  Creation Time : Mon Jun 15 17:03:00 2015
     Raid Level : raid5
     Array Size : 3903488 (3.72 GiB 4.00 GB)
  Used Dev Size : 1951744 (1906.32 MiB 1998.59 MB)
   Raid Devices : 3
  Total Devices : 3
    Persistence : Superblock is persistent

    Update Time : Mon Jun 15 17:03:11 2015
          State : clean 
 Active Devices : 3
Working Devices : 3
 Failed Devices : 0
  Spare Devices : 0

         Layout : left-symmetric
     Chunk Size : 512K

           Name : localhost.localdomain:0  (local to host localhost.localdomain)
           UUID : 855daf19:12025a2e:b22f4263:b673e5a3
         Events : 18

    Number   Major   Minor   RaidDevice State
       0       8       49        0      active sync   /dev/sdd1
       1       8       50        1      active sync   /dev/sdd2
       3       8       65        2      active sync   /dev/sde1

Check status

_________________________________________________________________
[root@localhost ~]# cat /proc/mdstat
Personalities : [raid6] [raid5] [raid4] 
md0 : active raid5 sde1[3] sdd1[0] sdd2[1]
      3903488 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3/3] [UUU]
      
unused devices: <none>

_________________________________________________________________
Fail a device in the group:

mdadm /dev/md0 -f /dev/sbdb1

Show the status:

[root@localhost ~]# mdadm -D /dev/md0
/dev/md0:
        Version : 1.2
  Creation Time : Mon Jun 15 17:03:00 2015
     Raid Level : raid5
     Array Size : 3903488 (3.72 GiB 4.00 GB)
  Used Dev Size : 1951744 (1906.32 MiB 1998.59 MB)
   Raid Devices : 3
  Total Devices : 3
    Persistence : Superblock is persistent

    Update Time : Mon Jun 15 17:31:31 2015
          State : clean, degraded 
 Active Devices : 2
Working Devices : 2
 Failed Devices : 1
  Spare Devices : 0

         Layout : left-symmetric
     Chunk Size : 512K

           Name : localhost.localdomain:0  (local to host localhost.localdomain)
           UUID : 855daf19:12025a2e:b22f4263:b673e5a3
         Events : 20

    Number   Major   Minor   RaidDevice State
       0       8       49        0      active sync   /dev/sdd1
       1       8       50        1      active sync   /dev/sdd2
       4       0        0        4      removed

       3       8       65        -      faulty   /dev/sde1

_________________________________________________________________
Remove disk from array:

[root@localhost ~]# mdadm /dev/md0 -r /dev/sde1
mdadm: hot removed /dev/sde1 from /dev/md0

See the status:

    Number   Major   Minor   RaidDevice State
       0       8       49        0      active sync   /dev/sdd1
       1       8       50        1      active sync   /dev/sdd2
       4       0        0        4      removed

_________________________________________________________________
Add a new disk:

mdadm /dev/md0 -a /dev/sdb1

Stop the array:

mdadm -Sv /dev/md0

_________________________________________________________________
Remove RAID array:

mdadm -remove /dev/md0


Then remove partitions:

pvremove /dev/sdb1

*** Must creat /boot on RAID 1


====================================================================================
*********************************** FILESYSTEMS ************************************
====================================================================================

**** FILESYSTEMS ****

[root@localhost ~]# mkfs.ext4 /dev/sdb

mke2fs 1.42.9 (28-Dec-2013)
/dev/sdb is entire device, not just one partition!
Proceed anyway? (y,n) y
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
524288 inodes, 2097152 blocks
104857 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=2147483648
64 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
  32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done


_________________________________________________________________
FSCK

Var mounted on /dev/sdb1

Go into runleve 1:
init 1

unmount /var (would be in the *fstab)

fsck -t ext4 /dev/sdb1

Remount:

mount /dev/sdb1 /var

_________________________________________________________________
TUNE2FS

Add jounaling to an ext2 filesystem:

1/ Mount as read only (or unmount)

mount -o remount,ro /dev/sdb1

2/ tune that sucker

tune2fs -j /dev/sdb1

3/ remount read/ write

mount -o remount,rw /dev/sdb1

4/ Change entry in *fstab file from ext2 to ext3

5/ Change back

tune2fs ^O has_journal

from ext2 pr ext3 to ext4 is a one way street but here ya are:

tune2fs -o extent,uninit_bg,dir_index /dev/vd1

6/ View setings

dumpe2fs /dev/vda1 | grep "Filesystem features"

_________________________________________________________________

See Swaps:

[root@localhost ~]# cat /proc/swaps 
Filename        Type    Size  Used  Priority
/dev/dm-1                               partition 839676  1924  -1


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------EXERCISE 6-2--------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*MKFS

Making DA filesystem:

[root@localhost ~]# mkfs.ext2 /dev/sdc1
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
61056 inodes, 244140 blocks
12207 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=251658240
8 block groups
32768 blocks per group, 32768 fragments per group
7632 inodes per group
Superblock backups stored on blocks: 
  32768, 98304, 163840, 229376

Allocating group tables: done                            
Writing inode tables: done                            
Writing superblocks and filesystem accounting information: done

*DUMPE2FS

[root@localhost ~]# dumpe2fs /dev/sdd
dumpe2fs 1.42.9 (28-Dec-2013)
Filesystem volume name:   <none>
Last mounted on:          <not available>
Filesystem UUID:          37a019e9-f25e-433b-83e8-94bc2d7d701c
Filesystem magic number:  0xEF53
Filesystem revision #:    1 (dynamic)
Filesystem features:      ext_attr resize_inode dir_index filetype sparse_super large_file
Filesystem flags:         signed_directory_hash 
Default mount options:    user_xattr acl
Filesystem state:         clean
Errors behavior:          Continue
Filesystem OS type:       Linux
Inode count:              262144
Block count:              1048576
Reserved block count:     52428
Free blocks:              1030066
Free inodes:              262133
First block:              0
Block size:               4096
Fragment size:            4096
Reserved GDT blocks:      255
Blocks per group:         32768
Fragments per group:      32768
Inodes per group:         8192
Inode blocks per group:   512
Filesystem created:       Thu Jun 18 22:08:37 2015
Last mount time:          n/a
Last write time:          Thu Jun 18 22:08:37 2015
Mount count:              0
Maximum mount count:      -1
Last checked:             Thu Jun 18 22:08:37 2015
Check interval:           0 (<none>)
Reserved blocks uid:      0 (user root)
Reserved blocks gid:      0 (group root)
First inode:              11
Inode size:           256
Required extra isize:     28
Desired extra isize:      28
Default directory hash:   half_md4
Directory Hash Seed:      ecba2966-083e-4f6d-a975-78ef7d4bb2e8


Group 0: (Blocks 0-32767)
  Primary superblock at 0, Group descriptors at 1-1
  Reserved GDT blocks at 2-256
  Block bitmap at 257 (+257), Inode bitmap at 258 (+258)
  Inode table at 259-770 (+259)
  31991 free blocks, 8181 free inodes, 2 directories
  Free blocks: 777-32767
  Free inodes: 12-8192

*MNT

Mount on /mnt folder:

mount /dev/sdc1 /mnt

View mounted folder:

[root@localhost ~]# mount | grep /mnt
/dev/sdc1 on /mnt type ext2 (rw,relatime,seclabel)

*TUNE2FS

Turn on journaling/ make ext3:

[root@localhost ~]# tune2fs -j /dev/sdc1

Disk /dev/sdc: 2147MB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start   End     Size    Type     File system  Flags
 1      512B    1000MB  1000MB  primary  ext3
 2      1000MB  2147MB  1147MB  primary

Now we cookin:

[root@localhost ~]# mount /dev/sdc1 /mnt
[root@localhost ~]# mount | grep /mnt
/dev/sdc1 on /mnt type ext3 (rw,relatime,seclabel,data=ordered)

??? - no idea what this command did:

 tune2fs -O extent,uninit_bg,dir_index /dev/sda1

*MKFS.EXT4

[root@localhost ~]# mkfs.ext4 /dev/sdc1
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
61056 inodes, 244140 blocks
12207 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=251658240
8 block groups
32768 blocks per group, 32768 fragments per group
7632 inodes per group
Superblock backups stored on blocks: 
  32768, 98304, 163840, 229376

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

---------------------------------------------------------------------
FHS - FILESYTEM HIERACHY STANDARD

/boot recommended on seperate disks:

Linux kernel, Initial RAM Disk, and bootloader 

Don't mount these guys on seperate disk:

/bin, /dev, /etc, /lib, /root, /sbin, and /selinux

/proc and /sys files are filled during boot and disappear when powered down


====================================================================================
***********************************    **LUKS     ************************************
====================================================================================

See if the required module is loaded - yep looking good:

[root@localhost ~]# lsmod | grep dm_crypt
dm_crypt               23138  0 
dm_mod                104038  9 dm_log,dm_mirror,dm_crypt

1/ Add random data to a disk:

*badblocks -c 10240 -s -w -t random -v /dev/sdf

Or using *DD

*dd if=/dev/urandom of=/dev/sdf

2/ Encrpt with LUKS:

*cryptsetup luksFormat /dev/sdf

3/ Create a UUID for the device:

[root@localhost ~]# *cryptsetup luksUUID /dev/sdf
6f1a927a-40a0-47ed-9bc9-f5a182eeea0d

Header Info:

root@localhost ~]# *cryptsetup luksDump /dev/sdf
LUKS header information for /dev/sdf

Version:        1
Cipher name:    aes
Cipher mode:    xts-plain64
Hash spec:      sha1
Payload offset: 4096
MK bits:        256
MK digest:      98 fe 97 dc 5e 54 01 a4 a1 d2 42 ff 7d b5 b3 a6 2a a2 5e 0c 
MK salt:        66 67 db 4d dc ea d2 dd 79 54 47 c4 ab b1 c2 81 
                58 ff 39 2e d8 a9 be e6 cd 46 07 60 5f 7c 8e 99 
MK iterations:  82000
UUID:           6f1a927a-40a0-47ed-9bc9-f5a182eeea0d

Key Slot 0: ENABLED
  Iterations:           316439
  Salt:                 44 3b 02 62 3f 10 90 c9 5d 66 d1 e6 b3 5e fb 5a 
                          01 3a c6 aa f8 e0 85 ac e0 6d 7c 77 c2 b8 b5 80 
  Key material offset:  8
  AF stripes:             4000
Key Slot 1: DISABLED
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED

4/ Add UUID to device:

[root@localhost ~]# cryptsetup luksOpen /dev/sdf 6f1a927a-40a0-47ed-9bc9-f5a182eeea0d
Enter passphrase for /dev/sdf: 

A novel approach:

# cryptsetup luksUUID /dev/sda1 > sda1uuid
# cryptsetup luksOpen /dev/sda1 `cat sda1uuid`

Now visible in /dev/mapper:

[root@localhost ~]# ls -ltr  /dev/mapper/
total 0
crw-------. 1 root root 10, 236 Jul  3 16:13 control
lrwxrwxrwx. 1 root root       7 Jul  3 16:26 centos-root -> ../dm-0
lrwxrwxrwx. 1 root root       7 Jul  3 16:26 centos-swap -> ../dm-1
lrwxrwxrwx. 1 root root       7 Jul  3 16:35 6f1a927a-40a0-47ed-9bc9-f5a182eeea0d -> ../dm-2

**Don't have to call it the UUID - could do:

cryptsetup luksOpen /dev/sdf test

5/ Make filesystem on the volume:

mkfs.ext4 /dev/mzpper/6f1a927a-40a0-47ed-9bc9-f5a182eeea0d

6/ Put in /etc/fstab:

The UUID above isn't the UUID of the filesystem. To get that:

[root@localhost mnt]# dumpe2fs /dev/mapper/6f1a927a-40a0-47ed-9bc9-f5a182eeea0d | grep UUID
dumpe2fs 1.42.9 (28-Dec-2013)
Filesystem UUID:          b43917de-1e44-4474-92b9-5dfd6630e923

**BLKID

Shows UUIDs for devices:

[root@localhost mnt]# blkid
/dev/sr0: UUID="2015-02-12-15-58-24-00" LABEL="VBOXADDITIONS_4.3.22_98236" TYPE="iso9660" 
/dev/sdf: UUID="6f1a927a-40a0-47ed-9bc9-f5a182eeea0d" TYPE="crypto_LUKS" 
/dev/sdd: UUID="37a019e9-f25e-433b-83e8-94bc2d7d701c" TYPE="ext2" 
/dev/sdb: UUID="dea41fd7-3f33-4b5c-97da-500cfe14086b" TYPE="ext4" 
/dev/sda1: UUID="0fbfc05a-0f53-43f4-98b0-ce856517d313" TYPE="xfs" 
/dev/sda2: UUID="qZw6wm-o0kt-Fcmq-iajl-NQEP-H95Z-Xi3zjg" TYPE="LVM2_member" 
/dev/sde1: UUID="062a3f60-db30-4bce-8bfe-b258a571ca3d" TYPE="ext4" 
/dev/sde4: UUID="3d523bcb-0502-4b9c-8a77-65bb74ef5da4" TYPE="swap" 
/dev/mapper/centos-root: UUID="1ab0b45f-c037-417c-a983-33d599d6cb1b" TYPE="xfs" 
/dev/mapper/centos-swap: UUID="d9853317-c9ac-4883-a83c-1cc540614813" TYPE="swap" 
/dev/mapper/6f1a927a-40a0-47ed-9bc9-f5a182eeea0d: UUID="b43917de-1e44-4474-92b9-5dfd6630e923" TYPE="ext4" 

**MTAB

Verify how partitions are mounted in /etc/mstab

[root@localhost ~]# cat /etc/mtab
rootfs / rootfs rw 0 0
proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0
sysfs /sys sysfs rw,seclabel,nosuid,nodev,noexec,relatime 0 0
devtmpfs /dev devtmpfs rw,seclabel,nosuid,size=241260k,nr_inodes=60315,mode=755 0 0
securityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,relatime 0 0
tmpfs /dev/shm tmpfs rw,seclabel,nosuid,nodev 0 0
devpts /dev/pts devpts rw,seclabel,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 0 0
tmpfs /run tmpfs rw,seclabel,nosuid,nodev,mode=755 0 0
tmpfs /sys/fs/cgroup tmpfs rw,seclabel,nosuid,nodev,noexec,mode=755 0 0
cgroup /sys/fs/cgroup/systemd cgroup rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd 0 0
pstore /sys/fs/pstore pstore rw,nosuid,nodev,noexec,relatime 0 0
cgroup /sys/fs/cgroup/cpuset cgroup rw,nosuid,nodev,noexec,relatime,cpuset 0 0
cgroup /sys/fs/cgroup/cpu,cpuacct cgroup rw,nosuid,nodev,noexec,relatime,cpuacct,cpu 0 0
cgroup /sys/fs/cgroup/memory cgroup rw,nosuid,nodev,noexec,relatime,memory 0 0
cgroup /sys/fs/cgroup/devices cgroup rw,nosuid,nodev,noexec,relatime,devices 0 0
cgroup /sys/fs/cgroup/freezer cgroup rw,nosuid,nodev,noexec,relatime,freezer 0 0
cgroup /sys/fs/cgroup/net_cls cgroup rw,nosuid,nodev,noexec,relatime,net_cls 0 0
cgroup /sys/fs/cgroup/blkio cgroup rw,nosuid,nodev,noexec,relatime,blkio 0 0
cgroup /sys/fs/cgroup/perf_event cgroup rw,nosuid,nodev,noexec,relatime,perf_event 0 0
cgroup /sys/fs/cgroup/hugetlb cgroup rw,nosuid,nodev,noexec,relatime,hugetlb 0 0
configfs /sys/kernel/config configfs rw,relatime 0 0
/dev/mapper/centos-root / xfs rw,seclabel,relatime,attr2,inode64,noquota 0 0
selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0
systemd-1 /proc/sys/fs/binfmt_misc autofs rw,relatime,fd=31,pgrp=1,timeout=300,minproto=5,maxproto=5,direct 0 0
mqueue /dev/mqueue mqueue rw,seclabel,relatime 0 0
hugetlbfs /dev/hugepages hugetlbfs rw,seclabel,relatime 0 0
debugfs /sys/kernel/debug debugfs rw,relatime 0 0
/dev/sda1 /boot xfs rw,seclabel,relatime,attr2,inode64,noquota 0 0
gvfsd-fuse /run/user/1000/gvfs fuse.gvfsd-fuse rw,nosuid,nodev,relatime,user_id=1000,group_id=1000 0 0
fusectl /sys/fs/fuse/connections fusectl rw,relatime 0 0
/dev/sr0 /run/media/nickschofield/VBOXADDITIONS_4.3.22_98236 iso9660 ro,nosuid,nodev,relatime,uid=1000,gid=1000,iocharset=utf8,mode=0400,dmode=0500 0 0
/dev/mapper/6f1a927a-40a0-47ed-9bc9-f5a182eeea0d /test ext4 rw,seclabel,relatime,data=ordered 0 0

---------------------------------------------------------------------
**FSTAB EXPLAINED

UUID=b43917de-1e44-4474-92b9-5dfd6630e923     /test             ext4              defaults              1           2

device                                      Mount point   Filesystem format     mount options     Dump value    Filesystem check order

Dump Order:
0 = not automatically saved to disk
1 = automatically saved to disk by dump command

Filesystem Check Order:

0 = Not checked during boot process
1 = Set root directory to this
2 = All other local filesystems

Mount Options:

async     = Data is read and written asynchronously.
atime     = The inode associated with each file is updated each time the file is
            accessed.
auto      = Searches through /etc/filesystems for the appropriate format for the
            partition; normally associated with a floppy or removable drive.
defaults  = Uses default mount options rw, suid, dev, exec, auto, nouser, and async.
dev       = Permits access to character devices such as terminals or consoles and
            block devices such as drives.
exec      = Allows binaries (compiled programs) to be run on this filesystem.
noatime   = The inode associated with each file is not updated when accessed.
noauto    = Requires explicit mounting. Common option for CD and floppy drives.
nodev     = Devices on this filesystem are not read or interpreted.
noexec    = Binaries (compiled programs) cannot be run on this filesystem.
nosuid    = Disallows setuid or setgid permissions on this filesystem.
nouser    = Only root users are allowed to mount the specified filesystem.
remount   = Remounts a currently mounted filesystem. Also an option for the
            mount command.
ro        = Mounts the filesystem as read-only.
rw        = Mounts the filesystem as read/write.
suid      = Allows setuid or setgid permissions on programs on this filesystem.
sync      = Reads and writes are done at the same speed (synchronously) on this
filesystem.
user      = Allows nonroot users to mount this filesystem. By default, this also
            sets the noexec, nosuid, and nodev options.
____________________________________
VIRTUAL FILESYSTEMS

Virtual filesystems that book says are configured in /etc/fstab (not) but can be seen in mount command.

tmpfs  /dev/shm    tmpfs    defaults          0 0
devpts /dev/pts   devpts    gid=5,mode=620    0 0
sysfs  /sys        sysfs    defaults          0 0
proc   /proc       proc     defaults          0 0

*tmpfs = RAM and Swap space

*devpts = psedo terminals (??)

*sysfs = info about system devices.

[root@localhost ~]# ls -ltr /sys
total 0
drwxr-xr-x.   9 root root 0 Jul  6 08:53 kernel
drwxr-xr-x. 136 root root 0 Jul  6 08:53 module
drwxr-xr-x.   6 root root 0 Jul  6 08:53 fs
drwxr-xr-x.  12 root root 0 Jul  6 08:53 devices
drwxr-xr-x.  43 root root 0 Jul  6 08:53 class
drwxr-xr-x.  24 root root 0 Jul  6 08:53 bus
drwxr-xr-x.   4 root root 0 Jul  6 08:53 dev
drwxr-xr-x.   2 root root 0 Jul  6 08:53 block
drwxr-xr-x.   2 root root 0 Jul  6 08:53 power
drwxr-xr-x.   5 root root 0 Jul  6 08:54 firmware
drwxr-xr-x.   2 root root 0 Jul  6 11:20 hypervisor

*proc = options for changing behaviour of kernel

_______________________________________________________
*MOUNT

Mounting a CD/DVD directly:

mount -t iso9660 /dev/sr0 /mnt

*iso9660 is the filesystem type


Can see guest additions mounted using blkid command:

/dev/sr0: UUID="2015-02-12-15-58-24-00" LABEL="VBOXADDITIONS_4.3.22_98236" TYPE="iso9660"

Change options so CD can be mounted by regular users:
- read-only mode
-doesn't try to automount it during boot process

/dev/sr0 /cdrom auto ro,noauto,users 0 0


_________________________________________________________
 *NFS AND *SAMBA

 e.g. (the following is a bit risky)

 mount -t nfs server1.example.com:/pub /share

Less risky - chuck in /etc/fstab:

server1:/pub nfs rsize=8192,wsize=8192,timeo=14,intr,udp  0   0

rsize, wsize = blocks of data to be read (bytes)

timeo = client will wait 1.4 secs for request to be compeleted

intr = can be interupted if NFS isn't responding

use nfs4 if connection is using NFS v4


*SAMBA

A bit simpler...

//server/pub  /share  cifs  rw,username=user,password=pass, 0 0

If you want it a bit more secure then chuck

username=user
password=password

in /etc/secret and use:

//server/pub /share cifs rw,credentials=/etc/secret 0 0

_________________________________________________________
*AUTOFS DAEMON

Default automounter options in this file:

AUTOFS FILE

[root@localhost ~]# cat /etc/sysconfig/autofs
#
# Init syatem options
#
# If the kernel supports using the autofs miscellanous device
# and you wish to use it you must set this configuration option
# to "yes" otherwise it will not be used.
#
USE_MISC_DEVICE="yes"
#
# Use OPTIONS to add automount(8) command line options that
# will be used when the daemon is started.
#
#OPTIONS=""
#
##############################################

**Supposed to have:

- a TIMEOUT=300 but not there.

- BROWSE_MODE=”no”


AUTO.MASTER FILE

Contains - which point to config files for each service:

/misc /etc/auto.misc  (which refers to /etc/auto.misc)
/net -hosts           (which refers to /etc/auto.net)
+auto.master          (which refers to /etc/auto.master?!?!)

Shared dirs are mounted on /misc and /net

_________________________________________________________
AUTOMOUNTER CONFIG FILE

**CD active by default with a 300 second timeout

[root@localhost ~]# cat /etc/auto.misc
#
# This is an automounter map and it has the following format
# key [ -mount-options-separated-by-comma ] location
# Details may be found in the autofs(5) manpage

cd    -fstype=iso9660,ro,nosuid,nodev :/dev/cdrom

# the following entries are samples to pique your imagination
#linux    -ro,soft,intr   ftp.example.org:/pub/linux
#boot   -fstype=ext2    :/dev/hda1
#floppy   -fstype=auto    :/dev/fd0
#floppy   -fstype=ext2    :/dev/fd0
#e2floppy -fstype=ext2    :/dev/fd0
#jaz    -fstype=ext2    :/dev/sdc1
#removable  -fstype=ext2    :/dev/hdd
#######################################################

This allows /misc/linux (auto mounted on misc & net dirs) mount point from a share NFS dir 
/pub/linux from ftp.example.org

linux    -ro,soft,intr   ftp.example.org:/pub/linux

For this line - auto means /etc/filesystems will be searched for what's on your disk

#floppy   -fstype=auto    :/dev/fd0

[root@localhost ~]# cat /etc/filesystems 
xfs
ext4
ext3
ext2
nodev proc
nodev devpts
iso9660
vfat
hfs
hfsplus
*


/////////////////////////////////////////////
==================LAB1=======================
/////////////////////////////////////////////

VGs and LVs both have UUIDs.

**Strange - when I used parted to make the partition, when I use the dump2gfs command to try and get the UUID it gives me this:

[root@localhost ~]# dumpe2fs /dev/sdf3
dumpe2fs 1.42.9 (28-Dec-2013)
dumpe2fs: Bad magic number in super-block while trying to open /dev/sdf3
Couldn't find valid filesystem superblock.

But when I do mkfs.ext4 /dev/sdf2 and run it again it gives all the info.



____________________________________________________________________________________
ADDITIONAL NOTES

ntfsprogs - supports the mounting of NTFS filesystems

[root@localhost ~]# mkswap /dev/sdf4
Setting up swapspace version 1, size = 976892 KiB
no label, UUID=76431b36-f2c7-4f45-8422-e64cde9efca3
[root@localhost ~]# swapon /dev/sdf4

/etc/fstab:

UUID=76431b36-f2c7-4f45-8422-e64cde9efca3   swap    swap  defaults  0 0

/////////////////////////////////////////////
==================LAB2=======================
/////////////////////////////////////////////

Wiped partition to begin again:

wipefs -a --force "/dev/sdf"

Removed partition from swap (cat /proc/swaps):

swapoff /dev/sdf4

Had to reboot and in rescue mode comment out the fstab entries followed by another reboot.

1/ do the parted thing

2/ pvcreate /dev/sdf1 etc.

3/ vgcreate lab2 /dev/sdf1 etc.

4/ lv create -L 2500 /dev/lab2/jolly_hockeysticks

5/ Rename vg: 

vgrename /dev/lab2 /dev/rad2

6/ Rename lg:

[root@localhost ~]# lvrename /dev/rad2/jolly_hockeystick /dev/rad2/sk8ordi3
  Renamed "jolly_hockeystick" to "sk8ordi3" in volume group "rad2"

7/ Make fs:

mkfs.ext4 /dev/rad2/sk8ordi3

mount /dev/rad2/sk8ordi3 /mnt/sk8ordi3

[root@localhost ~]# mount | grep sk8
/dev/mapper/rad2-sk8ordi3 on /mnt/sk8ordi3 type ext4 (rw,relatime,seclabel,data=ordered)

/////////////////////////////////////////////
==================LAB3=======================
/////////////////////////////////////////////

Resize that son of a gun:

[root@localhost ~]# lvextend -L 2850 /dev/rad2/sk8ordi3
  Rounding size to boundary between physical extents: 2.79 GiB
  Size of logical volume rad2/sk8ordi3 changed from 2.73 GiB (700 extents) to 2.79 GiB (713 extents).
  Logical volume sk8ordi3 successfully resized

/////////////////////////////////////////////
==================LAB4=======================
/////////////////////////////////////////////

cryptsetup luksFormat /dev/rad2/sk8ordi3

Enter password

Get info: 

cryptsetup luksDump /dev/rad2/sk8ordi3

Get the UUID:

[root@localhost ~]# cryptsetup luksUUID /dev/rad2/sk8ordi3
618d97b8-f49d-4363-be35-3537dba1ec58

Add UUID to it:

cryptsetup luksOpen /dev/rad2/sk8ordi3 618d97b8-f49d-4363-be35-3537dba1ec58

mkfs.ext4 /dev/mapper/0b74f243-4610-49f4-8a15-ba71219dd6c9

Get the UUID for the fstab:

[root@localhost ~]# dumpe2fs /dev/mapper/0b74f243-4610-49f4-8a15-ba71219dd6c9 | grep -i UUID
dumpe2fs 1.42.9 (28-Dec-2013)
Filesystem UUID:          fb2c48b4-3acc-4c24-a94d-f41d3088db70

/////////////////////////////////////////////
==================LAB5=======================
/////////////////////////////////////////////

/////////////////////////////////////////////
==================LAB6=======================
/////////////////////////////////////////////

====================================================================================
****************************** PACKAGE MANAGEMENT **********************************
====================================================================================
################
RPM

Download from FTP server:

rpm -ivh ftp://username:password@hostname:port/path/to/remote/package/file.rpm

i = install, v = verbose, h = hash marks

# rpm -ivh ftp://mjang:Ila451MS@192.168.122.1/pub/inst/policycoreutils-gui-
2.0.83-19.1.el6.x86_64.rpm

SECURITY

GPG = GNU Privacy Guard (like PGP)

[root@localhost ~]# ls /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-
RPM-GPG-KEY-CentOS-7          RPM-GPG-KEY-CentOS-Debug-7    RPM-GPG-KEY-CentOS-Testing-7

Stored in RPM database:

[root@localhost ~]# rpm -qa gpg-pubkey
gpg-pubkey-f4a80eb5-53a7ff4b

In red hat there are 5 keys in /etc/pki/rpm-gpg:

GPG Key                             Description
RPM-GPG-KEY-redhat-beta             Packages built for the RHEL 6 beta
RPM-GPG-KEY-redhat-legacy-former    Packages for pre–November 2006 releases
                                    (and updates)
RPM-GPG-KEY-redhat-legacy-release   Packages for post–November 2006 releases
RPM-GPG-KEY-redhat-legacy-rhx       Packages associated with Red Hat Exchange
RPM-GPG-KEY-redhat-release          Released packages for RHEL 6

If you see an available update for a kernel RPM, the temptation is to run the:
rpm -U newkernel command

DON'T DO IT!

Install kernel alongside new kernel:

rpm -ivh newkernel

or

yum install kernel

Fair bit O' junk in the /boot folder:

[root@localhost ~]# ls -ltr /boot
total 87504
-rw-------. 1 root root  2881257 Mar  7 00:45 System.map-3.10.0-229.el7.x86_64
-rw-r--r--. 1 root root   123838 Mar  7 00:45 config-3.10.0-229.el7.x86_64
-rwxr-xr-x. 1 root root  5029136 Mar  7 00:45 vmlinuz-3.10.0-229.el7.x86_64
-rw-r--r--. 1 root root   240039 Mar  7 00:47 symvers-3.10.0-229.el7.x86_64.gz
drwxr-xr-x. 2 root root       26 May 23 13:19 grub
-rw-r--r--. 1 root root   589469 May 23 13:20 initrd-plymouth.img
-rw-r--r--. 1 root root 39837247 May 23 13:23 initramfs-0-rescue-f79ec697463e4fe69fcf177a2ebc3ebd.img
-rwxr-xr-x. 1 root root  5029136 May 23 13:23 vmlinuz-0-rescue-f79ec697463e4fe69fcf177a2ebc3ebd
-rw-r--r--. 1 root root 17690018 May 23 13:24 initramfs-3.10.0-229.el7.x86_64.img
drwxr-xr-x. 6 root root      104 May 23 13:24 grub2
-rw-r--r--. 1 root root 18172830 Jul 28 17:00 initramfs-3.10.0-229.el7.x86_64kdump.img

/boot/config-3.10.0-229.el7.x86_64 has heaps of kernel config settings

initramfs-*   = initial RAM disk filesystem - called during boot. Still a bit of the ol' mystery around this

initrd-*      = root filesystem for kernel crash dumps

symvers-*     = list of modules

System.map-*  = map of system names for variables and functions with location in memory

vmlinuz-*     = the gosh damn kernel

The book talks about /boot/grub/grub.conf but all I can find is /boot/grub2/grub.cfg... systemd has changed this.

>>> PACKAGE QUERIES <<<

pg 13 (chpt 7)